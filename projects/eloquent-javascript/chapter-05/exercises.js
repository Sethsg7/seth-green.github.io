// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

const { characterScript } = require("./helpers");



function flatten() {

}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop() {

}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every() {

}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(str) {
  //remove spaces from input str
  let newStr = str;
  //create arrays for each direction
  let ltr = [];
  let rtl = [];
  //iterate through input str
  for (var i = 0; i < str.length; i++) {
    let scriptName = characterScript(newStr.charCodeAt(i));
    console.log(scriptName);
    //check if the scriptName result is !== to null
    if (scriptName !== null) {
      scriptName.direction === "ltr" ? ltr.push(scriptName.name) : rt1.push(scriptName.name);
    }
  }
  if (ltr.length > rt1.length) {
    return "ltr";
  } else {
    return "rt1"
  }
}







// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
